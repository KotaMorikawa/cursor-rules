When generating code for a Next.js project:

- For data fetching, use Server Components and the native fetch API. Place the fetching logic in the same file as the component that uses the data.
- Only use Client Components when client-side interactivity is required, such as for forms or components that need to access the browser's APIs.
- Structure components using the container/presentational pattern: containers handle logic and state, presentational components handle UI.
- Build component hierarchies using composition, avoiding deep inheritance chains.
- Use Suspense to wrap asynchronous components for better loading states and streaming.
- For pages with both static and dynamic content, consider using Partial Pre-Rendering (PPR) if available.
- Take advantage of Next.js's caching features to improve performance.
- Design APIs to be fine-grained to minimize over-fetching of data.
- Use server actions for handling form submissions and mutations.
- Implement error handling for data fetching and other asynchronous operations.
- Manage authentication and authorization on the server side, using middleware or server components to secure routes.
