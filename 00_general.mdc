# 00_general.mdc: プロジェクト共通規約

## 🤖 AIエージェント向け情報収集ガイド

**実装前に必ず以下の手順で情報収集を行ってください：**

1. **メインガイド確認**: @`.ai_guideline/coding_guide.md` を最初に参照
2. **レイヤー特化情報**: 該当する詳細ドキュメントを参照
   - Frontend: @`.ai_guideline/docs/frontend/`
   - Backend: @`.ai_guideline/docs/backend/`
   - Security: @`.ai_guideline/docs/security/`
   - Testing: @`.ai_guideline/docs/testing/`
3. **具体的実装方法**: 各レイヤーの詳細ドキュメントを参照

> 💡 **セマンティック検索のコツ**: `coding_guide参照→該当箇所参照→詳細ガイド参照` のフローで段階的に情報収集してください。

---

## 1. ファイル・ディレクトリ命名規則
- **基本:** `kebab-case` を使用する。(例: `user-profile.tsx`, `api-client`)
- **TypeScriptファイル:** `.ts` または `.tsx` (Reactコンポーネントの場合)
- **設定ファイル:** 各フレームワークやライブラリの規約に従う (例: `next.config.ts`, `tsconfig.json`)

## 2. コーディングスタイル
- **リンター・フォーマッター:** ESLint, Prettier を導入し、プロジェクトルートの設定ファイル (`eslint.config.mjs`, Prettierの設定ファイル等) に従う。CI/CDパイプラインでの自動チェックを推奨。
- **コメント:** 複雑なロジックや、意図が自明でない箇所にはコメントを記述する。コードから容易に理解できる内容のコメントは避ける。

## 3. バージョン管理 (Git)
- **ブランチ戦略:** Git Flow や GitHub Flow などを参考に、一貫したブランチ戦略を採用する。
  - `main` (または `master`): 本番リリース用ブランチ。直接コミットは禁止し、プルリクエスト経由でのマージのみとする。
  - `develop`: 開発用ブランチ。機能開発ブランチのマージ先。
  - `feature/[issue-number-]feature-name`: 機能開発用ブランチ (例: `feature/123-user-authentication`)。
  - `fix/[issue-number-]bug-name`: バグ修正用ブランチ (例: `fix/456-login-form-error`)。
  - `hotfix/[issue-number-]fix-name`: 緊急性の高い本番バグ修正用ブランチ。
- **コミットメッセージ:** Conventional Commits の規約に従うことを強く推奨。
  - フォーマット: `<type>(<scope>): <subject>`
  - 例: `feat(auth): add password reset functionality`
  - 例: `fix(ui): correct typo in button label`
- **プルリクエスト (PR):**
  - PRテンプレートを用意し、変更内容、関連イシュー、テスト内容、レビューポイントなどを明記する。
  - 1つ以上の承認 (Approve) を得てからマージする。セルフマージの可否はプロジェクトルールで定める。
  - CIによる自動テストがすべてパスしていることをマージの条件とする。

## 4. テスト
- **基本方針:** Unitテスト、Integrationテスト、E2Eテストをプロジェクトの規模や特性に応じてバランス良く記述する。
- **カバレッジ:** 目標とするテストカバレッジを設定し、CIで計測・レポートする。
- **テストフレームワーク:** Jest, React Testing Library (RTL), Playwright, Cypress などを採用する。
- **テストの場所:** テスト対象ファイルと同じディレクトリ内、または専用の `__tests__` ディレクトリに配置する。

## 5. エラーハンドリング
- **基本方針:** ユーザーには分かりやすいエラーメッセージを提示し、開発者向けには詳細なエラーログを記録する。
- **エラー境界 (Error Boundaries):** Reactアプリケーションにおいて、コンポーネントツリー内で発生したJavaScriptエラーをキャッチし、フォールバックUIを表示するために適切に配置する。
- **予期せぬエラー:** グローバルなエラーハンドラーを設け、予期せぬエラーが発生した場合でもアプリケーションがクラッシュしないようにする。

## 6. ドキュメンテーション
- **README.md:** プロジェクトの概要、セットアップ手順、起動方法、主要な技術スタック、ディレクトリ構造の概要などを記述する。
- **コンポーネントドキュメント:** 再利用可能なUIコンポーネントには、Propsの型定義、使用例、依存関係などを記述する。StorybookやStyleguidistの導入を検討する。
- **APIドキュメント:** バックエンドAPIには、エンドポイント、リクエスト/レスポンスのスキーマ (Zod等で定義)、認証方法、レートリミットなどを記述する。Swagger/OpenAPI仕様に準拠したドキュメント生成ツールの利用を検討する。
- **アーキテクチャドキュメント:** 必要に応じて、プロジェクトのアーキテクチャ図や主要な設計判断の根拠などを記録する。

---

## 📖 詳細情報の参照先

具体的な実装方法については、@AIガイドライン を参照してください。レイヤーごとの詳細なベストプラクティスと実装パターンが記載されています。
